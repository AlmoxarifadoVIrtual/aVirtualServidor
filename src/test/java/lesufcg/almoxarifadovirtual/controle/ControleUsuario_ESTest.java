/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 18 14:19:53 GMT 2017
 */

package lesufcg.almoxarifadovirtual.controle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import lesufcg.almoxarifadovirtual.controle.ControleUsuario;
import lesufcg.almoxarifadovirtual.modelo.usuario.FuncaoUsuario;
import lesufcg.almoxarifadovirtual.modelo.usuario.Usuario;
import lesufcg.almoxarifadovirtual.repositorio.RepositorioUsuario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControleUsuario_ESTest extends ControleUsuario_ESTest_scaffolding {
/*
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      Usuario usuario0 = mock(Usuario.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(usuario0).toString();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(usuario0).when(repositorioUsuario0).findOne(anyLong());
      doReturn(usuario0).when(repositorioUsuario0).save(any(java.lang.Object.class));
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      Long long0 = new Long(958L);
      Usuario usuario1 = controleUsuario0.get(long0);
      Usuario usuario2 = controleUsuario0.create(usuario1);
      assertSame(usuario1, usuario2);
  }
*/
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      // Undeclared exception!
      try { 
        controleUsuario0.update((Usuario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      controleUsuario0.setRepositorio((RepositorioUsuario) null);
      FuncaoUsuario funcaoUsuario0 = FuncaoUsuario.PRESTADOR;
      // Undeclared exception!
      try { 
        controleUsuario0.getByFuncao(funcaoUsuario0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      controleUsuario0.setRepositorio((RepositorioUsuario) null);
      // Undeclared exception!
      try { 
        controleUsuario0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      Long long0 = new Long(958L);
      controleUsuario0.setRepositorio((RepositorioUsuario) null);
      // Undeclared exception!
      try { 
        controleUsuario0.get(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      controleUsuario0.setRepositorio((RepositorioUsuario) null);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        controleUsuario0.delete(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      controleUsuario0.setRepositorio((RepositorioUsuario) null);
      // Undeclared exception!
      try { 
        controleUsuario0.create((Usuario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }
/*
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn("").when(repositorioUsuario0).save(any(java.lang.Object.class));
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      // Undeclared exception!
      try { 
        controleUsuario0.create((Usuario) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to lesufcg.almoxarifadovirtual.modelo.usuario.Usuario
         //
         verifyException("lesufcg.almoxarifadovirtual.controle.ControleUsuario", e);
      }
  }
*/
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      Long long0 = new Long(13L);
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(repositorioUsuario0).exists(anyLong());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      boolean boolean0 = controleUsuario0.delete(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      Long long0 = new Long(13L);
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(repositorioUsuario0).exists(anyLong());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      boolean boolean0 = controleUsuario0.delete(long0);
      assertFalse(boolean0);
  }
/*
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      Long long0 = new Long(13L);
      Usuario usuario0 = mock(Usuario.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(usuario0).toString();
      doReturn(long0).when(usuario0).getId();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(repositorioUsuario0).exists(anyLong());
      doReturn(usuario0).when(repositorioUsuario0).findOne(anyLong());
      doReturn("").when(repositorioUsuario0).save(any(java.lang.Object.class));
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      Usuario usuario1 = controleUsuario0.get(long0);
      boolean boolean0 = controleUsuario0.update(usuario1);
      assertTrue(boolean0);
  }
*/
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      Long long0 = new Long(13L);
      Usuario usuario0 = mock(Usuario.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(usuario0).toString();
      doReturn(long0).when(usuario0).getId();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(usuario0).when(repositorioUsuario0).findOne(anyLong());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      Usuario usuario1 = controleUsuario0.get(long0);
      RepositorioUsuario repositorioUsuario1 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(repositorioUsuario1).exists(anyLong());
      controleUsuario0.setRepositorio(repositorioUsuario1);
      boolean boolean0 = controleUsuario0.update(usuario1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioUsuario0).findByFuncao(any(lesufcg.almoxarifadovirtual.modelo.usuario.FuncaoUsuario.class));
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      FuncaoUsuario funcaoUsuario0 = FuncaoUsuario.PRESTADOR;
      List<Usuario> list0 = controleUsuario0.getByFuncao(funcaoUsuario0);
      assertNull(list0);
  }
/*
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(repositorioUsuario0).save(any(java.lang.Object.class));
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      Usuario usuario0 = controleUsuario0.create((Usuario) null);
      assertNull(usuario0);
  }
*/
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioUsuario0).findAll();
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      List<Usuario> list0 = controleUsuario0.getAll();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ControleUsuario controleUsuario0 = new ControleUsuario();
      RepositorioUsuario repositorioUsuario0 = mock(RepositorioUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(repositorioUsuario0).findOne(anyLong());
      Injector.inject(controleUsuario0, (Class<?>) ControleUsuario.class, "repositorio", (Object) repositorioUsuario0);
      Injector.validateBean(controleUsuario0, (Class<?>) ControleUsuario.class);
      Long long0 = new Long(0L);
      Usuario usuario0 = controleUsuario0.get(long0);
      assertNull(usuario0);
  }
}
