/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 02 19:42:56 GMT 2018
 */

package almoxarifadovirtual.servidor.servico;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import almoxarifadovirtual.servidor.modelo.produto.Produto;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeProduto;
import almoxarifadovirtual.servidor.servico.ServicoDeProduto;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServicoDeProduto_ESTest extends ServicoDeProduto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(repositorioDeProduto0).getOne(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      Long long0 = new Long(3567L);
      arrayList0.add(produto0);
      produto0.setId(long0);
      boolean boolean0 = servicoDeProduto0.validarRetirada(arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Stack<Produto> stack0 = new Stack<Produto>();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(repositorioDeProduto0).findAll();
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.listarProdutos();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Vector<Produto> vector0 = new Vector<Produto>(4019, 240);
      Produto produto0 = new Produto();
      vector0.add(produto0);
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, vector0).when(repositorioDeProduto0).findAll();
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      servicoDeProduto0.listarProdutos();
      List<Produto> list0 = servicoDeProduto0.listarProdutos();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeProduto0).findProdutosByDescricaoIsContaining(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.findProdutosByDescricaoIsContaining("Is[");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      Produto produto0 = new Produto();
      arrayList0.add(produto0);
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeProduto0).findProdutosByDescricaoIsContaining(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.findProdutosByDescricaoIsContaining("t+-i}xv[L:dss");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioDeProduto0).findByNome(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.encontrarProdutoPeloNome("JFR?O");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      Produto produto0 = new Produto();
      arrayList0.add(produto0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeProduto0).findByNome(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.encontrarProdutoPeloNome("INSTANCE");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(repositorioDeProduto0).findById(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Long long0 = new Long(217L);
      Produto produto1 = servicoDeProduto0.encontrarProdutoPeloId(long0);
      assertNull(produto1.getNome());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(repositorioDeProduto0).findByReferencia(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Produto produto1 = servicoDeProduto0.encontrarProdutoPelaReferencia("");
      assertNull(produto1.getNome());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      produto0.setQuantidade(516.8656778);
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((Produto) null, produto0).when(repositorioDeProduto0).findByReferencia(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      servicoDeProduto0.encontrarProdutoPelaReferencia("{dR(u_acd4U");
      Produto produto1 = servicoDeProduto0.encontrarProdutoPelaReferencia("{dR(u_acd4U");
      assertNull(produto1.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Stack<Produto> stack0 = new Stack<Produto>();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(repositorioDeProduto0).findByMarca(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.encontrarProdutoPelaMarca("KY2xWlUPNl?1~5>'9I");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      arrayList0.add((Produto) null);
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeProduto0).findByMarca(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.encontrarProdutoPelaMarca("UJXQi0Nm0'Mg ");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      Long long0 = new Long((-1L));
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(repositorioDeProduto0).findOne(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Produto produto1 = servicoDeProduto0.encontrarProduto(long0);
      assertNull(produto1.getCor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      produto0.setQuantidade(586);
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(repositorioDeProduto0).findOne(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Long long0 = new Long(911L);
      Produto produto1 = servicoDeProduto0.encontrarProduto(long0);
      assertSame(produto1, produto0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = new Produto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      servicoDeProduto0.repositorioDeProduto = null;
      // Undeclared exception!
      try { 
        servicoDeProduto0.salvarProduto(produto0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      servicoDeProduto0.repositorioDeProduto = null;
      Long long0 = Long.getLong("probe is null", (-698L));
      // Undeclared exception!
      try { 
        servicoDeProduto0.removerProduto(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      // Undeclared exception!
      try { 
        servicoDeProduto0.listarProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      // Undeclared exception!
      try { 
        servicoDeProduto0.findProdutosByDescricaoIsContaining("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      // Undeclared exception!
      try { 
        servicoDeProduto0.encontrarProdutoPeloNome((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      // Undeclared exception!
      try { 
        servicoDeProduto0.encontrarProdutoPelaReferencia((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      // Undeclared exception!
      try { 
        servicoDeProduto0.encontrarProdutoPelaMarca((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeProduto", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = mock(Produto.class, new ViolatedAssumptionAnswer());
      doReturn((-2.303)).when(produto0).getQuantidade();
      Produto produto1 = mock(Produto.class, new ViolatedAssumptionAnswer());
      doReturn(2565.1619919).when(produto1).getQuantidade();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0, produto1).when(repositorioDeProduto0).getOne(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      Produto produto2 = new Produto();
      Long long0 = new Long(3594L);
      produto2.setId(long0);
      arrayList0.add(produto2);
      servicoDeProduto0.validarRetirada(arrayList0);
      servicoDeProduto0.retirarProduto(produto2);
      assertNull(produto2.getReferencia());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      Produto produto0 = mock(Produto.class, new ViolatedAssumptionAnswer());
      doReturn(3316.26092).when(produto0).getQuantidade();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(produto0).when(repositorioDeProduto0).getOne(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      Produto produto1 = new Produto();
      Long long0 = new Long(3594L);
      produto1.setId(long0);
      arrayList0.add(produto1);
      boolean boolean0 = servicoDeProduto0.validarRetirada(arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(repositorioDeProduto0).findOne(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Long long0 = new Long(0L);
      Produto produto0 = servicoDeProduto0.encontrarProduto(long0);
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioDeProduto0).findProdutosByDescricaoIsContaining(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.findProdutosByDescricaoIsContaining("uCNM+");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Produto> arrayList0 = new ArrayList<Produto>();
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeProduto0).findByNome(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.encontrarProdutoPeloNome("INSTANCE");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Long long0 = new Long(0L);
      servicoDeProduto0.removerProduto(long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((List<Produto>) null).when(repositorioDeProduto0).findByMarca(anyString());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      List<Produto> list0 = servicoDeProduto0.encontrarProdutoPelaMarca("");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      doReturn((Produto) null).when(repositorioDeProduto0).findById(anyLong());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Long long0 = new Long(0L);
      Produto produto0 = servicoDeProduto0.encontrarProdutoPeloId(long0);
      assertNull(produto0);
  }
}
