/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 02 19:49:02 GMT 2018
 */

package almoxarifadovirtual.servidor.servico;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import almoxarifadovirtual.servidor.modelo.operacao.Operacao;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeOperacao;
import almoxarifadovirtual.servidor.servico.ServicoDeOperacao;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServicoDeOperacao_ESTest extends ServicoDeOperacao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioDeOperacao0).findByUsuarioId(anyLong());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Long long0 = new Long(0L);
      List<Operacao> list0 = servicoDeOperacao0.findByUsuarioId(long0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioDeOperacao0).findByTipoDeOperacao(any(almoxarifadovirtual.servidor.modelo.operacao.TipoDeOperacao.class));
      doReturn((List) null).when(repositorioDeOperacao0).findAll();
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      servicoDeOperacao0.findAll();
      List<Operacao> list0 = servicoDeOperacao0.findByTipoDeOperacao("CADASTRO");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      Vector<Operacao> vector0 = new Vector<Operacao>();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(repositorioDeOperacao0).findAll();
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      List<Operacao> list0 = servicoDeOperacao0.findAll();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      ArrayList<Operacao> arrayList0 = new ArrayList<Operacao>();
      Operacao operacao0 = new Operacao();
      arrayList0.add(operacao0);
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeOperacao0).findAll();
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      List<Operacao> list0 = servicoDeOperacao0.findAll();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      servicoDeOperacao0.repositorioDeOperacao = null;
      Operacao operacao0 = new Operacao();
      // Undeclared exception!
      try { 
        servicoDeOperacao0.save(operacao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeOperacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Long long0 = new Long(0L);
      servicoDeOperacao0.repositorioDeOperacao = null;
      // Undeclared exception!
      try { 
        servicoDeOperacao0.findByUsuarioId(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeOperacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      // Undeclared exception!
      try { 
        servicoDeOperacao0.findByTipoDeOperacao("+p1y:Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Funcao nao cadastrada no sistema +p1y:Z, as fun\u00E7\u00F5es v\u00E1lidas s\u00E3o [CADASTRO, RETIRADA, DEPOSITO]
         //
         verifyException("almoxarifadovirtual.servidor.modelo.operacao.TipoDeOperacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      servicoDeOperacao0.repositorioDeOperacao = null;
      // Undeclared exception!
      try { 
        servicoDeOperacao0.findAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoDeOperacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      Stack<Operacao> stack0 = new Stack<Operacao>();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(repositorioDeOperacao0).findByUsuarioId(anyLong());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Long long0 = new Long(0L);
      List<Operacao> list0 = servicoDeOperacao0.findByUsuarioId(long0);
      assertEquals(0, list0.size());
  }
}
