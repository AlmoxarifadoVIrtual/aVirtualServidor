/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 02 19:40:49 GMT 2018
 */

package almoxarifadovirtual.servidor.servico;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import almoxarifadovirtual.servidor.modelo.usuario.Usuario;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeUsuario;
import almoxarifadovirtual.servidor.servico.ServicoUsuario;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServicoUsuario_ESTest extends ServicoUsuario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      Vector<Usuario> vector0 = new Vector<Usuario>();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(repositorioDeUsuario0).findByFuncao(any(almoxarifadovirtual.servidor.modelo.usuario.FuncaoUsuario.class));
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      List<Usuario> list0 = servicoUsuario0.getUsuariosPelaFuncao("ADMINISTRADOR");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      Usuario usuario0 = new Usuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(usuario0).when(repositorioDeUsuario0).findOne(anyLong());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Long long0 = new Long((-1919L));
      Usuario usuario1 = servicoUsuario0.getUsuarioPelaId(long0);
      assertNull(usuario1.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      Vector<Usuario> vector0 = new Vector<Usuario>();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(repositorioDeUsuario0).findAll();
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      List<Usuario> list0 = servicoUsuario0.getAll();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      Usuario usuario0 = new Usuario();
      ArrayList<Usuario> arrayList0 = new ArrayList<Usuario>();
      arrayList0.add(usuario0);
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(repositorioDeUsuario0).findAll();
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      List<Usuario> list0 = servicoUsuario0.getAll();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      // Undeclared exception!
      try { 
        servicoUsuario0.update((Usuario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      // Undeclared exception!
      try { 
        servicoUsuario0.getUsuariosPelaFuncao("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Funcao nao cadastrada no sistema , as fun\u00E7\u00F5es v\u00E1lidas s\u00E3o [ADMINISTRADOR, ALMOXARIFE, PRESTADOR]
         //
         verifyException("almoxarifadovirtual.servidor.modelo.usuario.FuncaoUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      servicoUsuario0.setRepositorio((RepositorioDeUsuario) null);
      Long long0 = new Long((-883L));
      // Undeclared exception!
      try { 
        servicoUsuario0.getUsuarioPelaId(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      Usuario usuario0 = new Usuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(usuario0).when(repositorioDeUsuario0).findByNome(anyString());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Usuario usuario1 = servicoUsuario0.getUsuarioPeloNome("[dqxf==!");
      assertNull(usuario1.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(repositorioDeUsuario0).exists(anyLong());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Long long0 = new Long((-1L));
      boolean boolean0 = servicoUsuario0.delete(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(repositorioDeUsuario0).exists(anyLong());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Long long0 = new Long(2780L);
      boolean boolean0 = servicoUsuario0.delete(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioDeUsuario0).findAll();
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      List<Usuario> list0 = servicoUsuario0.getAll();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      servicoUsuario0.setRepositorio((RepositorioDeUsuario) null);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        servicoUsuario0.delete(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((List<Usuario>) null).when(repositorioDeUsuario0).findByFuncao(any(almoxarifadovirtual.servidor.modelo.usuario.FuncaoUsuario.class));
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      List<Usuario> list0 = servicoUsuario0.getUsuariosPelaFuncao("ADMINISTRADOR");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(repositorioDeUsuario0).findOne(anyLong());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Long long0 = new Long((-883L));
      Usuario usuario0 = servicoUsuario0.getUsuarioPelaId(long0);
      assertNull(usuario0);
  }
}
