/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 02 19:38:45 GMT 2018
 */

package almoxarifadovirtual.servidor.controle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import almoxarifadovirtual.servidor.controle.ControleDeAcesso;
import almoxarifadovirtual.servidor.controle.ControleDeAutenticacao;
import almoxarifadovirtual.servidor.modelo.autenticacao.Credenciais;
import almoxarifadovirtual.servidor.modelo.autenticacao.Token;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeToken;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeUsuario;
import almoxarifadovirtual.servidor.servico.ServicoLdap;
import almoxarifadovirtual.servidor.servico.ServicoToken;
import almoxarifadovirtual.servidor.servico.ServicoUsuario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControleDeAcesso_ESTest extends ControleDeAcesso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ControleDeAcesso controleDeAcesso0 = new ControleDeAcesso();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "servicoToken", (Object) servicoToken0);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAcesso0, (Class<?>) ControleDeAcesso.class);
      Credenciais credenciais0 = new Credenciais();
      // Undeclared exception!
      try { 
        controleDeAcesso0.logIn(credenciais0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Usu\u00E1rio n\u00E3o cadastrado no sistema!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ControleDeAcesso controleDeAcesso0 = new ControleDeAcesso();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Long long0 = new Long(2165L);
      Token token0 = new Token(long0);
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "servicoToken", (Object) servicoToken0);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAcesso0, (Class<?>) ControleDeAcesso.class);
      controleDeAcesso0.logout("Access-Control-Allow-Origin");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ControleDeAcesso controleDeAcesso0 = new ControleDeAcesso();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "servicoToken", (Object) servicoToken0);
      Injector.inject(controleDeAcesso0, (Class<?>) ControleDeAcesso.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAcesso0, (Class<?>) ControleDeAcesso.class);
      // Undeclared exception!
      try { 
        controleDeAcesso0.logIn((Credenciais) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAcesso", e);
      }
  }
}
