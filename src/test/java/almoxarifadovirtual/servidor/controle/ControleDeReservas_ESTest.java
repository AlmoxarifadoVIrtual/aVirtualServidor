/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 02 19:49:52 GMT 2018
 */

package almoxarifadovirtual.servidor.controle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import almoxarifadovirtual.servidor.controle.ControleDeAutenticacao;
import almoxarifadovirtual.servidor.controle.ControleDeReservas;
import almoxarifadovirtual.servidor.modelo.autenticacao.Token;
import almoxarifadovirtual.servidor.modelo.reserva.Reserva;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeOperacao;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeProduto;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeReserva;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeToken;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeUsuario;
import almoxarifadovirtual.servidor.servico.ServicoDeOperacao;
import almoxarifadovirtual.servidor.servico.ServicoDeProduto;
import almoxarifadovirtual.servidor.servico.ServicoDeReserva;
import almoxarifadovirtual.servidor.servico.ServicoLdap;
import almoxarifadovirtual.servidor.servico.ServicoToken;
import almoxarifadovirtual.servidor.servico.ServicoUsuario;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControleDeReservas_ESTest extends ControleDeReservas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      Reserva reserva0 = new Reserva();
      // Undeclared exception!
      try { 
        controleDeReservas0.registrarReserva("eGh7@E`d*.@zp", reserva0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      // Undeclared exception!
      try { 
        controleDeReservas0.getReservas((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      // Undeclared exception!
      try { 
        controleDeReservas0.concluirReserva("", (Long) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      Reserva reserva0 = new Reserva();
      // Undeclared exception!
      try { 
        controleDeReservas0.atualizarReserva("", reserva0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Long long0 = new Long(1L);
      Token token0 = new Token(long0);
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(repositorioDeUsuario0).findOne(anyLong());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      Reserva reserva0 = new Reserva();
      // Undeclared exception!
      try { 
        controleDeReservas0.registrarReserva("i(I +^t3 gr9", reserva0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.servico.ServicoUsuario", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = new Token();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(repositorioDeReserva0).findAll();
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      ResponseEntity<List<Reserva>> responseEntity0 = controleDeReservas0.getReservas("}h5g=m4:<!ZHK");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = new Token();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        controleDeReservas0.concluirReserva("", long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.modelo.autenticacao.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ControleDeReservas controleDeReservas0 = new ControleDeReservas();
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = new Token();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "controleDeAutenticacao", (Object) controleDeAutenticacao0);
      ServicoDeReserva servicoDeReserva0 = new ServicoDeReserva();
      RepositorioDeReserva repositorioDeReserva0 = mock(RepositorioDeReserva.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "repositorioDeReserva", (Object) repositorioDeReserva0);
      ServicoDeOperacao servicoDeOperacao0 = new ServicoDeOperacao();
      RepositorioDeOperacao repositorioDeOperacao0 = mock(RepositorioDeOperacao.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class, "repositorioDeOperacao", (Object) repositorioDeOperacao0);
      Injector.validateBean(servicoDeOperacao0, (Class<?>) ServicoDeOperacao.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeOperacao", (Object) servicoDeOperacao0);
      ServicoDeProduto servicoDeProduto0 = new ServicoDeProduto();
      RepositorioDeProduto repositorioDeProduto0 = mock(RepositorioDeProduto.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoDeProduto0, (Class<?>) ServicoDeProduto.class, "repositorioDeProduto", (Object) repositorioDeProduto0);
      Injector.validateBean(servicoDeProduto0, (Class<?>) ServicoDeProduto.class);
      Injector.inject(servicoDeReserva0, (Class<?>) ServicoDeReserva.class, "servicoDeProduto", (Object) servicoDeProduto0);
      Injector.validateBean(servicoDeReserva0, (Class<?>) ServicoDeReserva.class);
      Injector.inject(controleDeReservas0, (Class<?>) ControleDeReservas.class, "servicoDeReserva", (Object) servicoDeReserva0);
      Injector.validateBean(controleDeReservas0, (Class<?>) ControleDeReservas.class);
      Reserva reserva0 = new Reserva();
      // Undeclared exception!
      try { 
        controleDeReservas0.atualizarReserva("<", reserva0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.modelo.autenticacao.Token", e);
      }
  }
}
