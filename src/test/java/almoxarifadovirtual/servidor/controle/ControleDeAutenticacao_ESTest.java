/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 02 19:32:08 GMT 2018
 */

package almoxarifadovirtual.servidor.controle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import almoxarifadovirtual.servidor.controle.ControleDeAutenticacao;
import almoxarifadovirtual.servidor.modelo.autenticacao.Token;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeToken;
import almoxarifadovirtual.servidor.repositorio.RepositorioDeUsuario;
import almoxarifadovirtual.servidor.servico.ServicoLdap;
import almoxarifadovirtual.servidor.servico.ServicoToken;
import almoxarifadovirtual.servidor.servico.ServicoUsuario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControleDeAutenticacao_ESTest extends ControleDeAutenticacao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = new Token();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Long long0 = controleDeAutenticacao0.getUsuarioId("WH3{C/%CdyQ8");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Long long0 = new Long(563L);
      Token token0 = new Token(long0);
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Long long1 = controleDeAutenticacao0.getUsuarioId("probe is null");
      assertEquals(563L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = new Token();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarPrestador("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.modelo.autenticacao.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = new Token();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarAdmin("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.modelo.autenticacao.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.getUsuarioId(")<ItfANLKaw&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarUsuario("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Long long0 = new Long(0L);
      Token token0 = new Token(long0);
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      controleDeAutenticacao0.validarUsuario("!q");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Long long0 = new Long((-1L));
      Token token0 = new Token(long0);
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0, (Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Long long1 = controleDeAutenticacao0.getUsuarioId("");
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarUsuarioOuAdmin("", long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServicoLdap servicoLdap0 = new ServicoLdap();
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Token token0 = mock(Token.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(token0).validarToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarPrestador("&zGlSBX45Qj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarAlmoxarifeOuAdmin("W$Gt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarAdmin("|^9anf''=<[zP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Token inv\u00E1lido!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarUsuarioLdap("Rafael");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Usu\u00E1rio n\u00E3o cadastrado no sistema!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      controleDeAutenticacao0.validarUsuarioLdap("ExampleMatcher(nullHandler=");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      Long long0 = new Long(0L);
      Token token0 = new Token(long0);
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(repositorioDeToken0).findByChave(anyString());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      Long long1 = controleDeAutenticacao0.getUsuarioId("D~L{he+3#7WuN%");
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControleDeAutenticacao controleDeAutenticacao0 = new ControleDeAutenticacao();
      ServicoLdap servicoLdap0 = new ServicoLdap();
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoLdap", (Object) servicoLdap0);
      ServicoToken servicoToken0 = new ServicoToken();
      RepositorioDeToken repositorioDeToken0 = mock(RepositorioDeToken.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoToken0, (Class<?>) ServicoToken.class, "repository", (Object) repositorioDeToken0);
      Injector.validateBean(servicoToken0, (Class<?>) ServicoToken.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoToken", (Object) servicoToken0);
      ServicoUsuario servicoUsuario0 = new ServicoUsuario();
      RepositorioDeUsuario repositorioDeUsuario0 = mock(RepositorioDeUsuario.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoUsuario0, (Class<?>) ServicoUsuario.class, "repositorio", (Object) repositorioDeUsuario0);
      Injector.validateBean(servicoUsuario0, (Class<?>) ServicoUsuario.class);
      Injector.inject(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class, "servicoUsuario", (Object) servicoUsuario0);
      Injector.validateBean(controleDeAutenticacao0, (Class<?>) ControleDeAutenticacao.class);
      // Undeclared exception!
      try { 
        controleDeAutenticacao0.validarAcessoLdap((String) null, "PropertyValueTransformer must not be empty!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Usu\u00E1rio n\u00E3o cadastrado no sistema!
         //
         verifyException("almoxarifadovirtual.servidor.controle.ControleDeAutenticacao", e);
      }
  }
}
